/** REVIEW: Надо исправить: Класс описан формально и сейчас хранит только данные.
 * Функциональность скорее всего предполагала что он будет рендерить карточки, которые в него передадут и добавлять новые
 * Как один из вариантов можно реализовать следующие методы:
 * addCard - добавляет переданную карточку в DOM
 * removeCard - удаляет переданную карточку в DOM
 * render - добавляет в DOM изначальные карточки
 * Сами по себе карточки могут представлять интансы класса Card и хранить только данные и текущее состояние карточки не работая с DOM вообще.
 * **/

// Я мыслю этот класс как API с сервером и преобразователем списка карточек после удаления и добавления.

class CardList {
  constructor(data) {
    this.data = data;

  }

  loadInfo () {
    //Какие-то условия рендера массива карточек на странице после общения с сервером.
    //...
    return this.data;
  }

  addToList () {
    //Преобразование списка после добавления карточки, загрузка на сервер при каких-то условиях.
    console.log('add');
  }

  removeFromList () {
    //Преобразование списка после удаления карточки, загрузка на сервер при каких-то условиях.
    console.log ('remove');
  }

}
